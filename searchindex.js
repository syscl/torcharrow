Search.setIndex({"docnames": ["column", "dataframe", "functional", "generated/torcharrow.Column.all", "generated/torcharrow.Column.any", "generated/torcharrow.Column.append", "generated/torcharrow.Column.cast", "generated/torcharrow.Column.drop_duplicates", "generated/torcharrow.Column.drop_null", "generated/torcharrow.Column.fill_null", "generated/torcharrow.Column.filter", "generated/torcharrow.Column.flatmap", "generated/torcharrow.Column.head", "generated/torcharrow.Column.is_valid_at", "generated/torcharrow.Column.isin", "generated/torcharrow.Column.map", "generated/torcharrow.Column.tail", "generated/torcharrow.Column.to_arrow", "generated/torcharrow.Column.to_pandas", "generated/torcharrow.Column.to_pylist", "generated/torcharrow.Column.to_tensor", "generated/torcharrow.Column.transform", "generated/torcharrow.DataFrame.all", "generated/torcharrow.DataFrame.any", "generated/torcharrow.DataFrame.append", "generated/torcharrow.DataFrame.describe", "generated/torcharrow.DataFrame.drop", "generated/torcharrow.DataFrame.drop_duplicates", "generated/torcharrow.DataFrame.drop_null", "generated/torcharrow.DataFrame.fill_null", "generated/torcharrow.DataFrame.filter", "generated/torcharrow.DataFrame.flatmap", "generated/torcharrow.DataFrame.head", "generated/torcharrow.DataFrame.isin", "generated/torcharrow.DataFrame.log", "generated/torcharrow.DataFrame.map", "generated/torcharrow.DataFrame.max", "generated/torcharrow.DataFrame.mean", "generated/torcharrow.DataFrame.median", "generated/torcharrow.DataFrame.min", "generated/torcharrow.DataFrame.rename", "generated/torcharrow.DataFrame.reorder", "generated/torcharrow.DataFrame.select", "generated/torcharrow.DataFrame.sort", "generated/torcharrow.DataFrame.std", "generated/torcharrow.DataFrame.sum", "generated/torcharrow.DataFrame.tail", "generated/torcharrow.DataFrame.to_arrow", "generated/torcharrow.DataFrame.to_pandas", "generated/torcharrow.DataFrame.to_pylist", "generated/torcharrow.DataFrame.to_tensor", "generated/torcharrow.DataFrame.transform", "generated/torcharrow.DataFrame.where", "generated/torcharrow.NumericalColumn.abs", "generated/torcharrow.NumericalColumn.ceil", "generated/torcharrow.NumericalColumn.describe", "generated/torcharrow.NumericalColumn.floor", "generated/torcharrow.NumericalColumn.log", "generated/torcharrow.NumericalColumn.max", "generated/torcharrow.NumericalColumn.mean", "generated/torcharrow.NumericalColumn.median", "generated/torcharrow.NumericalColumn.min", "generated/torcharrow.NumericalColumn.round", "generated/torcharrow.NumericalColumn.std", "generated/torcharrow.NumericalColumn.sum", "generated/torcharrow.column", "generated/torcharrow.concat", "generated/torcharrow.dataframe", "generated/torcharrow.from_arrow", "generated/torcharrow.functional.bucketize", "generated/torcharrow.functional.firstx", "generated/torcharrow.functional.get_cosine_similarity", "generated/torcharrow.functional.get_jaccard_similarity", "generated/torcharrow.functional.get_max_count", "generated/torcharrow.functional.get_score_max", "generated/torcharrow.functional.get_score_min", "generated/torcharrow.functional.get_score_sum", "generated/torcharrow.functional.has_id_overlap", "generated/torcharrow.functional.id_overlap_count", "generated/torcharrow.functional.scale_to_0_1", "generated/torcharrow.functional.sigrid_hash", "generated/torcharrow.if_else", "generated/torcharrow.ilist_column.ListMethods.length", "generated/torcharrow.ilist_column.ListMethods.slice", "generated/torcharrow.ilist_column.ListMethods.vmap", "generated/torcharrow.istring_column.StringMethods.contains", "generated/torcharrow.istring_column.StringMethods.count", "generated/torcharrow.istring_column.StringMethods.endswith", "generated/torcharrow.istring_column.StringMethods.find", "generated/torcharrow.istring_column.StringMethods.findall", "generated/torcharrow.istring_column.StringMethods.isalnum", "generated/torcharrow.istring_column.StringMethods.isalpha", "generated/torcharrow.istring_column.StringMethods.isdecimal", "generated/torcharrow.istring_column.StringMethods.isdigit", "generated/torcharrow.istring_column.StringMethods.islower", "generated/torcharrow.istring_column.StringMethods.isnumeric", "generated/torcharrow.istring_column.StringMethods.isspace", "generated/torcharrow.istring_column.StringMethods.istitle", "generated/torcharrow.istring_column.StringMethods.isupper", "generated/torcharrow.istring_column.StringMethods.length", "generated/torcharrow.istring_column.StringMethods.lower", "generated/torcharrow.istring_column.StringMethods.match", "generated/torcharrow.istring_column.StringMethods.replace", "generated/torcharrow.istring_column.StringMethods.slice", "generated/torcharrow.istring_column.StringMethods.split", "generated/torcharrow.istring_column.StringMethods.startswith", "generated/torcharrow.istring_column.StringMethods.strip", "generated/torcharrow.istring_column.StringMethods.upper", "index", "torcharrow"], "filenames": ["column.rst", "dataframe.rst", "functional.rst", "generated/torcharrow.Column.all.rst", "generated/torcharrow.Column.any.rst", "generated/torcharrow.Column.append.rst", "generated/torcharrow.Column.cast.rst", "generated/torcharrow.Column.drop_duplicates.rst", "generated/torcharrow.Column.drop_null.rst", "generated/torcharrow.Column.fill_null.rst", "generated/torcharrow.Column.filter.rst", "generated/torcharrow.Column.flatmap.rst", "generated/torcharrow.Column.head.rst", "generated/torcharrow.Column.is_valid_at.rst", "generated/torcharrow.Column.isin.rst", "generated/torcharrow.Column.map.rst", "generated/torcharrow.Column.tail.rst", "generated/torcharrow.Column.to_arrow.rst", "generated/torcharrow.Column.to_pandas.rst", "generated/torcharrow.Column.to_pylist.rst", "generated/torcharrow.Column.to_tensor.rst", "generated/torcharrow.Column.transform.rst", "generated/torcharrow.DataFrame.all.rst", "generated/torcharrow.DataFrame.any.rst", "generated/torcharrow.DataFrame.append.rst", "generated/torcharrow.DataFrame.describe.rst", "generated/torcharrow.DataFrame.drop.rst", "generated/torcharrow.DataFrame.drop_duplicates.rst", "generated/torcharrow.DataFrame.drop_null.rst", "generated/torcharrow.DataFrame.fill_null.rst", "generated/torcharrow.DataFrame.filter.rst", "generated/torcharrow.DataFrame.flatmap.rst", "generated/torcharrow.DataFrame.head.rst", "generated/torcharrow.DataFrame.isin.rst", "generated/torcharrow.DataFrame.log.rst", "generated/torcharrow.DataFrame.map.rst", "generated/torcharrow.DataFrame.max.rst", "generated/torcharrow.DataFrame.mean.rst", "generated/torcharrow.DataFrame.median.rst", "generated/torcharrow.DataFrame.min.rst", "generated/torcharrow.DataFrame.rename.rst", "generated/torcharrow.DataFrame.reorder.rst", "generated/torcharrow.DataFrame.select.rst", "generated/torcharrow.DataFrame.sort.rst", "generated/torcharrow.DataFrame.std.rst", "generated/torcharrow.DataFrame.sum.rst", "generated/torcharrow.DataFrame.tail.rst", "generated/torcharrow.DataFrame.to_arrow.rst", "generated/torcharrow.DataFrame.to_pandas.rst", "generated/torcharrow.DataFrame.to_pylist.rst", "generated/torcharrow.DataFrame.to_tensor.rst", "generated/torcharrow.DataFrame.transform.rst", "generated/torcharrow.DataFrame.where.rst", "generated/torcharrow.NumericalColumn.abs.rst", "generated/torcharrow.NumericalColumn.ceil.rst", "generated/torcharrow.NumericalColumn.describe.rst", "generated/torcharrow.NumericalColumn.floor.rst", "generated/torcharrow.NumericalColumn.log.rst", "generated/torcharrow.NumericalColumn.max.rst", "generated/torcharrow.NumericalColumn.mean.rst", "generated/torcharrow.NumericalColumn.median.rst", "generated/torcharrow.NumericalColumn.min.rst", "generated/torcharrow.NumericalColumn.round.rst", "generated/torcharrow.NumericalColumn.std.rst", "generated/torcharrow.NumericalColumn.sum.rst", "generated/torcharrow.column.rst", "generated/torcharrow.concat.rst", "generated/torcharrow.dataframe.rst", "generated/torcharrow.from_arrow.rst", "generated/torcharrow.functional.bucketize.rst", "generated/torcharrow.functional.firstx.rst", "generated/torcharrow.functional.get_cosine_similarity.rst", "generated/torcharrow.functional.get_jaccard_similarity.rst", "generated/torcharrow.functional.get_max_count.rst", "generated/torcharrow.functional.get_score_max.rst", "generated/torcharrow.functional.get_score_min.rst", "generated/torcharrow.functional.get_score_sum.rst", "generated/torcharrow.functional.has_id_overlap.rst", "generated/torcharrow.functional.id_overlap_count.rst", "generated/torcharrow.functional.scale_to_0_1.rst", "generated/torcharrow.functional.sigrid_hash.rst", "generated/torcharrow.if_else.rst", "generated/torcharrow.ilist_column.ListMethods.length.rst", "generated/torcharrow.ilist_column.ListMethods.slice.rst", "generated/torcharrow.ilist_column.ListMethods.vmap.rst", "generated/torcharrow.istring_column.StringMethods.contains.rst", "generated/torcharrow.istring_column.StringMethods.count.rst", "generated/torcharrow.istring_column.StringMethods.endswith.rst", "generated/torcharrow.istring_column.StringMethods.find.rst", "generated/torcharrow.istring_column.StringMethods.findall.rst", "generated/torcharrow.istring_column.StringMethods.isalnum.rst", "generated/torcharrow.istring_column.StringMethods.isalpha.rst", "generated/torcharrow.istring_column.StringMethods.isdecimal.rst", "generated/torcharrow.istring_column.StringMethods.isdigit.rst", "generated/torcharrow.istring_column.StringMethods.islower.rst", "generated/torcharrow.istring_column.StringMethods.isnumeric.rst", "generated/torcharrow.istring_column.StringMethods.isspace.rst", "generated/torcharrow.istring_column.StringMethods.istitle.rst", "generated/torcharrow.istring_column.StringMethods.isupper.rst", "generated/torcharrow.istring_column.StringMethods.length.rst", "generated/torcharrow.istring_column.StringMethods.lower.rst", "generated/torcharrow.istring_column.StringMethods.match.rst", "generated/torcharrow.istring_column.StringMethods.replace.rst", "generated/torcharrow.istring_column.StringMethods.slice.rst", "generated/torcharrow.istring_column.StringMethods.split.rst", "generated/torcharrow.istring_column.StringMethods.startswith.rst", "generated/torcharrow.istring_column.StringMethods.strip.rst", "generated/torcharrow.istring_column.StringMethods.upper.rst", "index.rst", "torcharrow.rst"], "titles": ["torcharrow.Column", "torcharrow.DataFrame", "torcharrow.functional", "torcharrow.Column.all", "torcharrow.Column.any", "torcharrow.Column.append", "torcharrow.Column.cast", "torcharrow.Column.drop_duplicates", "torcharrow.Column.drop_null", "torcharrow.Column.fill_null", "torcharrow.Column.filter", "torcharrow.Column.flatmap", "torcharrow.Column.head", "torcharrow.Column.is_valid_at", "torcharrow.Column.isin", "torcharrow.Column.map", "torcharrow.Column.tail", "torcharrow.Column.to_arrow", "torcharrow.Column.to_pandas", "torcharrow.Column.to_pylist", "torcharrow.Column.to_tensor", "torcharrow.Column.transform", "torcharrow.DataFrame.all", "torcharrow.DataFrame.any", "torcharrow.DataFrame.append", "torcharrow.DataFrame.describe", "torcharrow.DataFrame.drop", "torcharrow.DataFrame.drop_duplicates", "torcharrow.DataFrame.drop_null", "torcharrow.DataFrame.fill_null", "torcharrow.DataFrame.filter", "torcharrow.DataFrame.flatmap", "torcharrow.DataFrame.head", "torcharrow.DataFrame.isin", "torcharrow.DataFrame.log", "torcharrow.DataFrame.map", "torcharrow.DataFrame.max", "torcharrow.DataFrame.mean", "torcharrow.DataFrame.median", "torcharrow.DataFrame.min", "torcharrow.DataFrame.rename", "torcharrow.DataFrame.reorder", "torcharrow.DataFrame.select", "torcharrow.DataFrame.sort", "torcharrow.DataFrame.std", "torcharrow.DataFrame.sum", "torcharrow.DataFrame.tail", "torcharrow.DataFrame.to_arrow", "torcharrow.DataFrame.to_pandas", "torcharrow.DataFrame.to_pylist", "torcharrow.DataFrame.to_tensor", "torcharrow.DataFrame.transform", "torcharrow.DataFrame.where", "torcharrow.NumericalColumn.abs", "torcharrow.NumericalColumn.ceil", "torcharrow.NumericalColumn.describe", "torcharrow.NumericalColumn.floor", "torcharrow.NumericalColumn.log", "torcharrow.NumericalColumn.max", "torcharrow.NumericalColumn.mean", "torcharrow.NumericalColumn.median", "torcharrow.NumericalColumn.min", "torcharrow.NumericalColumn.round", "torcharrow.NumericalColumn.std", "torcharrow.NumericalColumn.sum", "torcharrow.column", "torcharrow.concat", "torcharrow.dataframe", "torcharrow.from_arrow", "torcharrow.functional.bucketize", "torcharrow.functional.firstx", "torcharrow.functional.get_cosine_similarity", "torcharrow.functional.get_jaccard_similarity", "torcharrow.functional.get_max_count", "torcharrow.functional.get_score_max", "torcharrow.functional.get_score_min", "torcharrow.functional.get_score_sum", "torcharrow.functional.has_id_overlap", "torcharrow.functional.id_overlap_count", "torcharrow.functional.scale_to_0_1", "torcharrow.functional.sigrid_hash", "torcharrow.if_else", "torcharrow.ilist_column.ListMethods.length", "torcharrow.ilist_column.ListMethods.slice", "torcharrow.ilist_column.ListMethods.vmap", "torcharrow.istring_column.StringMethods.contains", "torcharrow.istring_column.StringMethods.count", "torcharrow.istring_column.StringMethods.endswith", "torcharrow.istring_column.StringMethods.find", "torcharrow.istring_column.StringMethods.findall", "torcharrow.istring_column.StringMethods.isalnum", "torcharrow.istring_column.StringMethods.isalpha", "torcharrow.istring_column.StringMethods.isdecimal", "torcharrow.istring_column.StringMethods.isdigit", "torcharrow.istring_column.StringMethods.islower", "torcharrow.istring_column.StringMethods.isnumeric", "torcharrow.istring_column.StringMethods.isspace", "torcharrow.istring_column.StringMethods.istitle", "torcharrow.istring_column.StringMethods.isupper", "torcharrow.istring_column.StringMethods.length", "torcharrow.istring_column.StringMethods.lower", "torcharrow.istring_column.StringMethods.match", "torcharrow.istring_column.StringMethods.replace", "torcharrow.istring_column.StringMethods.slice", "torcharrow.istring_column.StringMethods.split", "torcharrow.istring_column.StringMethods.startswith", "torcharrow.istring_column.StringMethods.strip", "torcharrow.istring_column.StringMethods.upper", "TorchArrow Documentation", "torcharrow"], "terms": {"A": [0, 10, 25, 30, 42, 52, 67, 91, 92, 95], "1": [0, 2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 104], "dimens": 0, "torch": [0, 21, 51, 108], "tensor": [0, 20, 50, 108], "like": [0, 1, 14, 21, 25, 33, 43, 51, 55, 65, 108], "structur": [0, 109], "contain": [0, 14, 19, 20, 33, 49, 50, 79, 92, 109], "element": [0, 3, 4, 14, 15, 22, 23, 33, 34, 35, 53, 57, 70, 81, 82, 83, 87, 99, 103, 105], "singl": [0, 79], "It": [0, 108, 109], "also": [0, 1, 15, 35, 74, 75, 76, 108, 109], "support": [0, 15, 35, 65, 67, 83, 104, 108], "non": [0, 3, 4, 13, 15, 22, 23, 35, 36, 37, 38, 39, 43, 44, 45, 58, 59, 61, 64, 65, 94, 98], "numer": [0, 25, 69, 80, 93, 95], "string": [0, 2, 5, 10, 15, 24, 25, 30, 35, 42, 52, 65, 67, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 105, 106, 107], "list": [0, 2, 5, 7, 10, 11, 12, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 35, 41, 43, 46, 49, 50, 51, 55, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 104], "struct": [0, 12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 67, 84], "defin": [0, 15, 25, 35, 55, 65, 67, 69, 71, 80, 109], "follow": 0, "which": [0, 1, 10, 14, 15, 25, 30, 33, 35, 55, 65, 67], "modul": 0, "dtype": [0, 1, 2, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 51, 52, 55, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "abbrevi": 0, "dt": [0, 5, 11, 15, 24, 31, 35, 65, 67, 84], "tabl": [0, 47, 68, 80], "below": 0, "32": 0, "bit": 0, "float": [0, 9, 29, 69], "point": [0, 62], "float32": [0, 25, 34, 37, 38, 44, 71, 72, 73, 74, 75, 76, 77, 78], "nullabl": [0, 2, 15, 34, 35, 36, 37, 38, 39, 44, 45, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84], "64": 0, "float64": [0, 65], "8": [0, 15, 25, 34, 35, 36, 39, 45, 65, 69, 70, 72, 73, 77, 78, 80], "sign": 0, "integ": 0, "int8": 0, "16": 0, "int16": 0, "int32": [0, 69], "int64": [0, 2, 8, 9, 12, 14, 15, 16, 20, 28, 29, 32, 35, 36, 39, 42, 43, 45, 46, 50, 52, 65, 67, 70, 80, 84], "boolean": [0, 10, 14, 30, 33, 85], "item_dtyp": [0, 65], "field": [0, 12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 67, 84], "devic": [0, 1, 2, 65, 67, 68, 81, 108], "alloc": [0, 1, 65], "length": [0, 1, 2, 5, 8, 9, 10, 15, 24, 28, 29, 30, 35, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "return": [0, 1, 3, 4, 5, 8, 9, 12, 13, 14, 15, 16, 22, 23, 24, 26, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 57, 58, 59, 60, 61, 63, 64, 66, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104], "number": [0, 1, 12, 16, 32, 46, 62, 70, 73, 78, 90, 104], "row": [0, 1, 7, 8, 9, 10, 11, 12, 15, 16, 21, 27, 28, 29, 30, 31, 32, 35, 46, 51, 52], "includ": [0, 1, 2, 25, 52, 55, 106], "null": [0, 1, 3, 4, 8, 9, 13, 15, 22, 23, 28, 29, 35, 36, 37, 38, 39, 43, 44, 45, 58, 59, 61, 64], "valu": [0, 1, 5, 7, 8, 9, 14, 15, 24, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 79, 80, 81], "null_count": [0, 2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "python": [1, 15, 19, 21, 35, 49, 51, 108], "librari": 1, "built": 1, "apach": 1, "arrow": [1, 17, 47, 68, 108, 109], "columnar": 1, "memori": [1, 65], "format": [1, 21, 51, 108, 109], "load": 1, "join": [1, 104], "aggreg": 1, "filter": [1, 15, 35, 52], "otherwis": [1, 77, 90, 91, 92, 93, 94, 95, 96, 97, 98], "manipul": 1, "provid": [1, 10, 15, 25, 30, 35, 67, 109], "panda": [1, 10, 18, 30, 48, 52], "natur": [1, 34, 57], "fit": 1, "ml": 1, "ecosystem": 1, "familiar": 1, "scientist": 1, "engin": 1, "so": 1, "thei": 1, "can": [1, 15, 20, 35, 42, 50, 52, 67, 108], "us": [1, 8, 9, 10, 15, 20, 25, 28, 29, 30, 35, 42, 43, 50, 52, 55, 65, 67, 80, 109], "express": [1, 42, 52, 101, 104], "tabular": [1, 109], "workflow": 1, "featur": [1, 69, 108], "train": 1, "infer": [1, 65, 67], "preprocess": [1, 108], "column": [1, 2, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 55, 57, 58, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 99, 100, 102, 103, 104, 106, 107, 108], "The": [1, 20, 21, 25, 42, 50, 51, 67, 72, 109], "label": 1, "type": [1, 11, 14, 15, 20, 21, 25, 31, 33, 35, 50, 51, 65, 67, 76, 108], "ar": [2, 3, 5, 8, 15, 22, 24, 25, 28, 35, 65, 67, 73, 90, 91, 92, 93, 95, 96, 108], "here": [2, 25, 65], "an": [2, 10, 15, 25, 30, 35, 52, 80, 91, 97, 108], "exampl": [2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "usag": 2, "lpad": 2, "import": [2, 5, 8, 9, 12, 14, 15, 16, 20, 24, 25, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "ta": [2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "from": [2, 7, 10, 15, 20, 25, 27, 30, 35, 42, 50, 52, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 92, 103, 106], "col": [2, 70, 79, 84], "abc": 2, "x": [2, 10, 15, 30, 35, 70], "yz": 2, "s": [2, 8, 9, 28, 29, 42, 52, 58, 59, 61, 63, 64, 65, 104], "http": 2, "facebookincub": 2, "github": 2, "io": 2, "html": 2, "5": [2, 12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 55, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84], "123": 2, "0": [2, 5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 59, 62, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 92, 104], "12abc": 2, "1231x": 2, "2": [2, 5, 8, 9, 10, 12, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 58, 59, 61, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 104], "123yz": 2, "true": [2, 3, 4, 10, 15, 22, 23, 30, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102], "3": [2, 5, 8, 9, 10, 15, 20, 24, 25, 28, 29, 30, 33, 34, 35, 37, 38, 42, 44, 50, 52, 55, 59, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84], "cpu": [2, 65, 67, 81], "anoth": 2, "arrai": [2, 14, 17, 25, 33, 43, 55, 65, 68, 109], "array_except": 2, "col1": 2, "col2": 2, "4": [2, 8, 9, 10, 15, 20, 25, 28, 29, 30, 33, 34, 35, 36, 39, 42, 45, 50, 52, 55, 58, 61, 64, 65, 67, 69, 71, 73, 74, 75, 76, 80, 81, 84], "6": [2, 12, 15, 16, 25, 32, 33, 34, 35, 36, 37, 39, 43, 45, 46, 55, 59, 67, 69, 80, 84], "whether": [3, 4, 13, 14, 22, 23, 33], "datafram": [5, 12, 14, 15, 16, 20, 68, 108, 109], "paramet": [5, 8, 9, 10, 12, 14, 15, 16, 20, 24, 25, 28, 29, 30, 32, 33, 35, 42, 43, 46, 50, 55, 65, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 83, 104], "sf": [5, 24, 65], "hello": [5, 24, 65], "world": [5, 24, 65, 104], "how": [5, 8, 24, 28, 65], "you": [5, 24, 65, 67], "i": [5, 13, 24], "am": [5, 24], "fine": [5, 24], "given": [6, 52, 62, 104, 108], "subset": [7, 27], "ty": [7, 8, 11, 15, 27, 28, 31, 35, 43], "union": [7, 9, 10, 11, 14, 15, 27, 29, 30, 31, 33, 35, 65, 67, 68, 69, 72], "str": [7, 9, 10, 11, 15, 21, 26, 27, 29, 30, 31, 35, 40, 41, 43, 51, 65, 67, 68, 85, 86, 89, 100, 101, 102, 104, 107], "liter": [7, 8, 11, 15, 27, 28, 31, 35, 43, 104], "none": [7, 8, 9, 10, 11, 15, 20, 21, 25, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 43, 44, 45, 50, 51, 55, 58, 59, 61, 64, 65, 67, 68, 83, 84, 103, 104], "keep": [7, 10, 27, 30, 42], "first": [7, 12, 16, 27, 32, 43, 46, 70, 71, 72, 73, 74, 75, 76, 77, 78], "last": [7, 12, 16, 27, 32, 43, 46], "fals": [7, 10, 27, 30, 33, 65, 81, 90, 91, 92, 93, 94, 95, 96, 97, 98], "experiment": [7, 13, 27, 41, 84], "api": [7, 13, 27, 41, 84], "remov": [7, 8, 9, 26, 27, 28, 29, 42, 106], "duplic": [7, 27], "frame": [7, 8, 9, 27, 28, 29], "ani": [8, 28, 67], "all": [8, 10, 25, 28, 30, 42, 43, 74, 75, 76, 89, 90, 91, 92, 93, 95, 96, 104], "where": [8, 9, 10, 15, 28, 29, 30, 35, 65, 67, 81], "ha": [8, 28, 67, 70, 74, 75, 76], "default": [8, 10, 15, 20, 21, 25, 28, 30, 35, 43, 50, 51, 55, 62, 65, 67, 83, 104], "If": [8, 10, 15, 21, 25, 28, 30, 35, 43, 51, 55, 62, 65, 67, 73, 79], "drop": [8, 28], "icolumn": [8, 9, 12, 16, 28, 29, 32, 46], "fill_nul": [8, 28], "fill": [8, 9, 28, 29], "na": [8, 28], "nan": [8, 28], "specifi": [8, 9, 15, 28, 29, 35, 62], "method": [8, 9, 15, 20, 28, 29, 35, 50], "fill_valu": [9, 29], "int": [9, 12, 15, 16, 29, 32, 35, 46, 62, 69, 70, 80, 83, 103, 104], "bool": [9, 29, 43, 85, 102], "dict": [9, 11, 14, 15, 20, 29, 31, 33, 35, 40, 50, 67], "drop_nul": [9, 29], "999": [9, 29, 55], "predic": [10, 30], "callabl": [10, 11, 15, 21, 30, 31, 35, 51, 84], "iter": [10, 30, 65, 67], "option": [10, 11, 15, 21, 25, 30, 31, 35, 43, 51, 55, 65, 67, 68, 83, 103], "select": [10, 15, 30, 35, 65, 67, 81], "differ": [10, 15, 30, 35], "function": [10, 15, 30, 35, 108], "same": [10, 30], "n": [10, 12, 15, 16, 30, 32, 35, 46, 104], "ari": [10, 30], "argument": [10, 30, 42], "name": [10, 15, 20, 30, 35, 40, 42, 50, 67], "invok": [10, 15, 21, 30, 35, 51], "appli": [10, 30, 69, 80], "map": [10, 11, 20, 21, 30, 31, 50, 51, 65, 84], "reduc": [10, 30], "flatmap": [10, 15, 30, 35], "lambda": [10, 15, 30, 35, 84], "arg": [11, 15, 31, 35, 42], "na_act": [11, 15, 31, 35], "ignor": [11, 15, 25, 31, 35], "accord": [11, 15, 31, 35, 104], "input": [11, 15, 21, 31, 35, 51, 69, 70, 77, 80], "correspond": [11, 15, 31, 35, 74, 75, 76, 81], "requir": [11, 15, 21, 31, 35, 51], "result": [11, 15, 21, 25, 31, 35, 51], "item": [11, 15, 21, 31, 35, 51, 73, 85, 89], "tail": [12, 32], "df": [12, 14, 16, 20, 25, 32, 33, 34, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 67, 84], "rang": [12, 14, 16, 32, 43, 46, 67, 79, 80], "7": [12, 14, 16, 25, 32, 37, 38, 43, 44, 45, 46, 55, 64, 67, 69, 80], "b": [12, 14, 15, 16, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 52, 67, 84], "revers": [12, 14, 16, 32, 43, 46, 67], "c": [12, 14, 15, 16, 32, 35, 42, 43, 46, 52, 67, 84], "index": [12, 13, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 67, 80, 108], "d": [12, 14, 16, 32, 42, 43, 46, 67], "99": [12, 32, 43, 67], "100": [12, 32, 43, 67, 80], "count": [12, 14, 15, 16, 20, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 50, 52, 55, 67, 73], "data": [13, 15, 25, 35, 60, 62, 63, 65, 67, 68, 79, 108, 109], "valid": [13, 65, 67, 80], "e": 13, "check": [14, 33], "each": [14, 15, 33, 34, 35, 36, 37, 38, 39, 44, 45, 53, 54, 56, 62, 81, 82, 83, 85, 86, 87, 88, 89, 95, 97, 99, 101, 102, 103, 105, 106], "presenc": [14, 33], "indic": [14, 88], "104": [14, 67], "thi": [15, 35, 42, 67, 69, 80, 108], "becom": [15, 35], "treat": [15, 35], "user": [15, 35, 108], "udf": [15, 35], "must": [15, 35], "global": [15, 35], "class": [15, 35, 108], "instanc": [15, 35, 73], "your": [15, 35], "effici": [15, 35], "improv": [15, 35, 108], "avoid": [15, 35], "call": [15, 35], "awai": [15, 35], "forc": [15, 35, 65, 67], "output": [15, 35], "determin": [15, 35, 101], "111": [15, 35, 67], "defaultdict": [15, 35], "miss": [15, 21, 35, 51], "collect": [15, 35], "suppli": [15, 35, 65, 67], "def": [15, 35], "add_ten": [15, 35], "num": [15, 35], "10": [15, 25, 35, 37, 42, 52, 69, 80], "11": [15, 35, 42, 52, 65, 67, 69, 80], "12": [15, 35, 42, 52], "14": [15, 35], "note": [15, 35], "abov": [15, 35], "would": [15, 35], "fail": [15, 35], "error": [15, 35], "sinc": [15, 35], "addten": [15, 35], "To": [15, 35], "pass": [15, 21, 35, 51], "need": [15, 35, 108], "prepar": [15, 35], "add_ten_or_0": [15, 35], "els": [15, 35, 43], "over": [15, 35, 109], "get": [15, 35], "whole": [15, 35], "tupl": [15, 35, 67], "add_unari": [15, 35], "tup": [15, 35], "multi": [15, 35], "add_binari": [15, 35], "more": [15, 35], "than": [15, 35], "one": [15, 35, 65, 91, 92, 108], "known": [15, 35], "mandatori": [15, 35], "17": [15, 35, 42], "29": [15, 35], "30": [15, 35], "divmod": [15, 35], "quotient": [15, 35], "remaind": [15, 35], "state": [15, 35], "written": [15, 35], "captur": [15, 35], "deleg": [15, 35], "fib": [15, 35], "elif": [15, 35], "dataclass": [15, 35], "__post_init__": [15, 35], "self": [15, 17, 18, 35, 42, 47, 48, 52], "add_fib": [15, 35], "m": [15, 35], "56": [15, 35], "57": [15, 35], "58": [15, 35], "head": [16, 43, 46, 70], "105": [16, 46, 67], "convert": [17, 18, 19, 20, 21, 47, 48, 49, 50, 51, 68, 69, 100, 107], "seri": [18, 25, 53], "plain": [19, 49], "scalar": [19, 49], "convers": [20, 50, 108], "pytorch": [20, 21, 50, 51], "packedlist": [20, 50], "packedmap": [20, 50], "etc": [20, 50], "tensorconvers": [20, 50], "onli": [20, 50, 52, 79, 92], "For": [20, 50, 108], "tap": [20, 50], "label_id": [20, 50], "token_id": [20, 50], "101": [20, 50, 67], "102": [20, 50, 67], "padsequ": [20, 50], "padding_valu": [20, 50], "torcharrowstruct_0": [20, 50], "func": [21, 51], "mini": [21, 51], "batch": [21, 51, 84], "time": [21, 51, 108], "instead": [21, 51], "hint": [21, 51], "percentil": [25, 55], "exclud": [25, 55], "gener": [25, 55, 108], "descript": [25, 55], "statist": [25, 55, 108], "calcul": [25, 55], "25": [25, 55, 65, 80], "50": [25, 55], "75": [25, 55, 72], "white": 25, "limit": [25, 104, 108], "exclus": 25, "omit": 25, "noth": 25, "9": [25, 38, 44, 76, 92], "metric": 25, "mean": [25, 38, 42, 44, 55, 104], "std": [25, 55], "58114": 25, "min": [25, 34, 55, 65, 74, 75], "max": [25, 55, 65, 73], "without": [26, 67], "show": 33, "logarithm": [34, 57], "60944": 34, "693147": 34, "79176": 34, "38629": 34, "07944": 34, "maxim": 36, "minimum": [39, 61], "mapper": 40, "remap": 40, "prescrib": 41, "order": [41, 43, 67, 80], "kwarg": 42, "analog": [42, 52], "sql": [42, 52], "transform": 42, "old": 42, "new": [42, 57, 67], "comput": [42, 82, 99], "special": [42, 52], "symbol": 42, "me": [42, 52], "refer": [42, 52], "posit": [42, 62, 81, 83], "project": [42, 108], "shortcut": 42, "denot": [42, 109], "begin": [42, 105], "add": [42, 67], "xf": [42, 52], "13": [42, 52, 70, 72, 73, 77, 78], "15": 42, "colnam": 42, "ascend": 43, "na_posit": 43, "descend": 43, "comparison": 43, "after": 43, "befor": 43, "standard": 44, "deviat": 44, "19": 45, "condit": 52, "NOT": 52, "satisfi": 52, "set": [52, 67], "p": 52, "equival": [52, 100, 107], "write": 52, "when": [52, 67, 104], "absolut": 53, "round": [54, 56], "upward": 54, "smallest": 54, "integr": [54, 56], "t": [55, 67], "251": 55, "498": 55, "335": 55, "501": 55, "downward": 56, "largest": 56, "maximum": [58, 73, 104], "decim": [62, 92], "place": 62, "neg": [62, 83], "left": [62, 67, 81, 106], "stddev": 63, "creat": [65, 67], "content": [65, 67], "automat": [65, 67], "possibl": [65, 67], "runtim": [65, 67, 108], "scope": [65, 67], "multipl": [65, 67, 108], "gpu": [65, 67], "velox": [65, 67, 108], "vector": [65, 67, 71, 84], "come": [65, 67], "soon": [65, 67], "auto": 65, "arbitrarili": 65, "arbitrari": 65, "fixed_s": 65, "averag": 65, "climat": 65, "per": 65, "contin": 65, "citi": 65, "kei": [65, 67], "yearli": 65, "temperatur": 65, "mf": 65, "helsinki": 65, "21": 65, "moscow": 65, "24": 65, "algier": 65, "kinshasa": 65, "22": [65, 67], "26": 65, "concaten": 66, "particular": 67, "should": [67, 108], "custom": 67, "both": 67, "semant": 67, "construct": 67, "empti": [67, 94, 98], "just": 67, "strongli": 67, "equal": 67, "immut": 67, "except": [67, 108], "alwai": 67, "its": 67, "hasn": 67, "been": 67, "append": 67, "exist": 67, "end": [67, 87], "103": 67, "build": 67, "nest": 67, "df_inner": 67, "b1": [67, 81], "33": 67, "b2": [67, 81], "222": 67, "333": 67, "df_outer": 67, "l": 67, "t1": 67, "t2": 67, "value_col": [69, 80], "numericalcolumn": [69, 79, 80, 108], "border": 69, "listcolumn": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 108], "common": [69, 80, 108], "oper": [69, 80, 83, 108, 109], "recommend": [69, 80, 108], "domain": [69, 80], "dens": 69, "spars": 69, "discret": 69, "num_to_copi": 70, "input_id": [71, 72, 73, 74, 75, 76, 77, 78], "input_id_scor": [71, 76], "matching_id": [71, 72, 73, 74, 75, 76, 77, 78], "matching_id_scor": [71, 74, 75, 76], "cosin": 71, "between": [71, 72, 73, 78], "weight": [71, 74, 75, 76], "id": [71, 72, 73, 74, 75, 76, 77, 78], "input_ids_scor": [71, 76], "score": [71, 74, 75, 76], "second": [71, 72, 73, 74, 75, 76, 77, 78], "matching_ids_scor": [71, 74, 75, 76], "831522": 71, "jaccard_similar": 72, "jaccard": 72, "similar": 72, "intersect": 72, "overlap": [73, 77, 78], "contribut": 73, "among": [74, 75], "get_score_min": 74, "sum": 76, "param": 76, "two": [77, 78, 109], "scale": 79, "sigmoid": 79, "salt": 80, "max_valu": 80, "hash": 80, "indici": 80, "have": 80, "shrunken": 80, "embed": 80, "intial": 80, "random": 80, "process": 80, "60": 80, "54": 80, "67": 80, "cond": 81, "right": [81, 106], "them": 81, "either": [81, 90], "righ": 81, "depend": 81, "a1": 81, "a2": 81, "a3": 81, "a4": 81, "b3": 81, "b4": 81, "start": [83, 97, 103], "stop": [83, 103], "sublist": 83, "yet": [83, 104, 108], "fun": 84, "expect": [84, 108], "work": 84, "repres": 84, "f1": 84, "f2": 84, "abstract": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "pat": [85, 86, 87, 89, 101, 102, 104, 105], "regex": [85, 102], "test": [85, 87, 105, 108], "pattern": [85, 86, 87, 89, 102, 105], "within": 85, "occurr": [86, 89, 102], "match": [87, 105], "sub": 88, "lowest": 88, "find": 89, "see": [89, 108], "re": 89, "charact": [90, 91, 92, 93, 95, 96], "alphanumer": 90, "alphabet": [90, 91], "least": [91, 92], "digit": 92, "lower": 94, "case": [94, 97, 98], "whitespac": [96, 104, 106], "word": 97, "upper": [97, 98], "letter": 97, "stringcolumn": [100, 103, 107, 108], "lowercas": 100, "regular": [101, 104], "repl": 102, "substr": 103, "around": 104, "separ": 104, "delimit": 104, "doe": 104, "do": 104, "interpret": 104, "what": 104, "wonder": 104, "realli": 104, "lead": 106, "trail": 106, "newlin": 106, "side": 106, "uppercas": 107, "part": 108, "open": 108, "sourc": 108, "deep": 108, "learn": 108, "framework": 108, "execut": 108, "describ": 108, "classifi": 108, "releas": 108, "statu": 108, "stabl": 108, "These": 108, "maintain": 108, "long": 108, "term": 108, "major": 108, "perform": 108, "gap": 108, "we": 108, "backward": 108, "compat": 108, "although": 108, "break": 108, "chang": 108, "happen": 108, "notic": 108, "ahead": 108, "beta": 108, "tag": 108, "becaus": 108, "mai": 108, "base": 108, "feedback": 108, "coverag": 108, "across": 108, "complet": 108, "commit": 108, "through": 108, "classif": 108, "howev": 108, "prototyp": 108, "typic": 108, "avail": 108, "binari": 108, "distribut": 108, "pypi": 108, "conda": 108, "sometim": 108, "behind": 108, "run": 108, "flag": 108, "earli": 108, "stage": 108, "creation": 108, "op": 108, "mutat": 108, "relat": [108, 109], "clean": 108, "arithmt": 108, "core": 108, "high": 108, "level": 108, "torchaudio": 108, "torchtext": 108, "torchvis": 108, "torchdata": 108, "torchelast": 108, "torchserv": 108, "xla": 108, "packag": 109, "dimension": 109, "potenti": 109, "heterogen": 109, "addition": 109, "util": 109, "other": 109, "especi": 109, "zero": 109, "copi": 109}, "objects": {"torcharrow": [[0, 0, 1, "", "Column"], [1, 0, 1, "", "DataFrame"], [0, 0, 1, "", "ListColumn"], [0, 0, 1, "", "NumericalColumn"], [0, 0, 1, "", "StringColumn"], [65, 3, 1, "", "column"], [66, 3, 1, "", "concat"], [67, 3, 1, "", "dataframe"], [68, 3, 1, "", "from_arrow"], [81, 3, 1, "", "if_else"]], "torcharrow.Column": [[3, 1, 1, "", "all"], [4, 1, 1, "", "any"], [5, 1, 1, "", "append"], [6, 1, 1, "", "cast"], [0, 2, 1, "", "device"], [7, 1, 1, "", "drop_duplicates"], [8, 1, 1, "", "drop_null"], [0, 2, 1, "", "dtype"], [9, 1, 1, "", "fill_null"], [10, 1, 1, "", "filter"], [11, 1, 1, "", "flatmap"], [12, 1, 1, "", "head"], [13, 1, 1, "", "is_valid_at"], [14, 1, 1, "", "isin"], [0, 2, 1, "", "length"], [15, 1, 1, "", "map"], [0, 2, 1, "", "null_count"], [16, 1, 1, "", "tail"], [17, 1, 1, "", "to_arrow"], [18, 1, 1, "", "to_pandas"], [19, 1, 1, "", "to_pylist"], [20, 1, 1, "", "to_tensor"], [21, 1, 1, "", "transform"]], "torcharrow.DataFrame": [[22, 1, 1, "", "all"], [23, 1, 1, "", "any"], [24, 1, 1, "", "append"], [1, 2, 1, "", "columns"], [25, 1, 1, "", "describe"], [1, 2, 1, "", "device"], [26, 1, 1, "", "drop"], [27, 1, 1, "", "drop_duplicates"], [28, 1, 1, "", "drop_null"], [1, 2, 1, "", "dtype"], [29, 1, 1, "", "fill_null"], [30, 1, 1, "", "filter"], [31, 1, 1, "", "flatmap"], [32, 1, 1, "", "head"], [33, 1, 1, "", "isin"], [1, 2, 1, "", "length"], [34, 1, 1, "", "log"], [35, 1, 1, "", "map"], [36, 1, 1, "", "max"], [37, 1, 1, "", "mean"], [38, 1, 1, "", "median"], [39, 1, 1, "", "min"], [40, 1, 1, "", "rename"], [41, 1, 1, "", "reorder"], [42, 1, 1, "", "select"], [43, 1, 1, "", "sort"], [44, 1, 1, "", "std"], [45, 1, 1, "", "sum"], [46, 1, 1, "", "tail"], [47, 1, 1, "", "to_arrow"], [48, 1, 1, "", "to_pandas"], [49, 1, 1, "", "to_pylist"], [50, 1, 1, "", "to_tensor"], [51, 1, 1, "", "transform"], [52, 1, 1, "", "where"]], "torcharrow.NumericalColumn": [[53, 1, 1, "", "abs"], [54, 1, 1, "", "ceil"], [55, 1, 1, "", "describe"], [56, 1, 1, "", "floor"], [57, 1, 1, "", "log"], [58, 1, 1, "", "max"], [59, 1, 1, "", "mean"], [60, 1, 1, "", "median"], [61, 1, 1, "", "min"], [62, 1, 1, "", "round"], [63, 1, 1, "", "std"], [64, 1, 1, "", "sum"]], "torcharrow.functional": [[69, 3, 1, "", "bucketize"], [70, 3, 1, "", "firstx"], [71, 3, 1, "", "get_cosine_similarity"], [72, 3, 1, "", "get_jaccard_similarity"], [73, 3, 1, "", "get_max_count"], [74, 3, 1, "", "get_score_max"], [75, 3, 1, "", "get_score_min"], [76, 3, 1, "", "get_score_sum"], [77, 3, 1, "", "has_id_overlap"], [78, 3, 1, "", "id_overlap_count"], [79, 3, 1, "", "scale_to_0_1"], [80, 3, 1, "", "sigrid_hash"]], "torcharrow.ilist_column.ListMethods": [[82, 1, 1, "", "length"], [83, 1, 1, "", "slice"], [84, 1, 1, "", "vmap"]], "torcharrow.istring_column.StringMethods": [[85, 1, 1, "", "contains"], [86, 1, 1, "", "count"], [87, 1, 1, "", "endswith"], [88, 1, 1, "", "find"], [89, 1, 1, "", "findall"], [90, 1, 1, "", "isalnum"], [91, 1, 1, "", "isalpha"], [92, 1, 1, "", "isdecimal"], [93, 1, 1, "", "isdigit"], [94, 1, 1, "", "islower"], [95, 1, 1, "", "isnumeric"], [96, 1, 1, "", "isspace"], [97, 1, 1, "", "istitle"], [98, 1, 1, "", "isupper"], [99, 1, 1, "", "length"], [100, 1, 1, "", "lower"], [101, 1, 1, "", "match"], [102, 1, 1, "", "replace"], [103, 1, 1, "", "slice"], [104, 1, 1, "", "split"], [105, 1, 1, "", "startswith"], [106, 1, 1, "", "strip"], [107, 1, 1, "", "upper"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "titleterms": {"torcharrow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "column": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 65], "data": [0, 1], "type": 0, "class": [0, 1], "refer": [0, 108], "numericalcolumn": [0, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "stringcolumn": 0, "listcolumn": 0, "datafram": [1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67], "gener": 1, "api": [1, 108], "function": [1, 2, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "relat": 1, "clean": 1, "convers": [1, 109], "statist": 1, "arithmt": 1, "oper": [1, 2], "velox": 2, "core": 2, "recommend": 2, "high": 2, "level": 2, "all": [3, 22], "ani": [4, 23], "append": [5, 24], "cast": 6, "drop_dupl": [7, 27], "drop_nul": [8, 28], "fill_nul": [9, 29], "filter": [10, 30], "flatmap": [11, 31], "head": [12, 32], "is_valid_at": 13, "isin": [14, 33], "map": [15, 35], "tail": [16, 46], "to_arrow": [17, 47], "to_panda": [18, 48], "to_pylist": [19, 49], "to_tensor": [20, 50], "transform": [21, 51], "describ": [25, 55], "drop": 26, "log": [34, 57], "max": [36, 58], "mean": [37, 59], "median": [38, 60], "min": [39, 61], "renam": 40, "reorder": 41, "select": 42, "sort": 43, "std": [44, 63], "sum": [45, 64], "where": 52, "ab": 53, "ceil": 54, "floor": 56, "round": 62, "concat": 66, "from_arrow": 68, "bucket": 69, "firstx": 70, "get_cosine_similar": 71, "get_jaccard_similar": 72, "get_max_count": 73, "get_score_max": 74, "get_score_min": 75, "get_score_sum": 76, "has_id_overlap": 77, "id_overlap_count": 78, "scale_to_0_1": 79, "sigrid_hash": 80, "if_els": 81, "ilist_column": [82, 83, 84], "listmethod": [82, 83, 84], "length": [82, 99], "slice": [83, 103], "vmap": 84, "istring_column": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "stringmethod": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "contain": 85, "count": 86, "endswith": 87, "find": 88, "findal": 89, "isalnum": 90, "isalpha": 91, "isdecim": 92, "isdigit": 93, "islow": 94, "isnumer": 95, "isspac": 96, "istitl": 97, "isupp": 98, "lower": 100, "match": 101, "replac": 102, "split": 104, "startswith": 105, "strip": 106, "upper": 107, "document": 108, "pytorch": 108, "librari": 108, "indic": 108, "creation": 109, "op": 109, "mutat": 109}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 56}})